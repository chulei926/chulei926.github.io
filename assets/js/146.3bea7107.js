(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{508:function(s,n,e){"use strict";e.r(n);var t=e(22),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"配置-event"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-event"}},[s._v("#")]),s._v(" 配置-event")]),s._v(" "),e("div",{staticClass:"language-nginx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("events")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; ")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# epoll模型 是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" epoll\n    \n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单个进程最大连接数（最大连接数=连接数+进程数）")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("worker_connections")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keepalive 超时时间")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keepalive_timeout")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当某一个时刻只有一个网络连接请求服务器时，服务器上有多个睡眠的进程会被同时叫醒，这样会损耗一定的服务器性能。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Nginx中的accept_mutex设置为on，将会对多个Nginx进程（worker processer）接收连接时进行序列化，防止多个进程争抢资源。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认就是on。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("accept_mutex")]),s._v(" on"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx worker processer 可以做到同时接收多个新到达的网络连接，前提是把该参数设置为on。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认为off，即每个worker process一次只能接收一个新到达的网络连接。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想要高并发就要把此参数设置成ON!")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("multi_accept")]),s._v(" on"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 分页大小可以用命令getconf PAGESIZE 取得。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [root@web001 ~]# getconf PAGESIZE")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("client_header_buffer_size")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("k"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个将为打开文件指定缓存，默认是没有启用的。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# max 指定缓存数量，建议和打开文件数一致")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# inactive 是指经过多长时间文件没被请求后删除缓存")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open_file_cache")]),s._v(" max"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("65535")]),s._v(" inactive"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个是指多长时间检查一次缓存的有效信息。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 ")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open_file_cache_valid")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# open_file_cache 指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 ")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open_file_cache_min_uses")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off ")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open_file_cache_errors")]),s._v(" on"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br")])]),e("h1",{attrs:{id:"补充说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[s._v("#")]),s._v(" 补充说明：")]),s._v(" "),e("h3",{attrs:{id:"与apache相类-nginx针对不同的操作系统-有不同的事件模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与apache相类-nginx针对不同的操作系统-有不同的事件模型"}},[s._v("#")]),s._v(" 与apache相类，nginx针对不同的操作系统，有不同的事件模型")]),s._v(" "),e("h4",{attrs:{id:"a-标准事件模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-标准事件模型"}},[s._v("#")]),s._v(" A）标准事件模型")]),s._v(" "),e("p",[s._v("select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll")]),s._v(" "),e("ul",[e("li",[s._v("select：只能在Windows下使用，这个事件模型不建议在高负载的系统使用")]),s._v(" "),e("li",[s._v("poll：Nginx默认首选，但不是在所有系统下都可用")])]),s._v(" "),e("h4",{attrs:{id:"b-高效事件模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-高效事件模型"}},[s._v("#")]),s._v(" B）高效事件模型")]),s._v(" "),e("ul",[e("li",[s._v("kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。")]),s._v(" "),e("li",[e("strong",[s._v("epoll")]),s._v("："),e("strong",[s._v("使用于Linux内核2.6版本及以后的系统")]),s._v("。")]),s._v(" "),e("li",[s._v("/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。")]),s._v(" "),e("li",[s._v("eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。")])]),s._v(" "),e("h3",{attrs:{id:"为什么nginx总体性能比apache高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么nginx总体性能比apache高"}},[s._v("#")]),s._v(" 为什么Nginx总体性能比Apache高？")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("Nginx使用 epoll和kqueue(freebsd) 异步网络I/O模型")])]),s._v(" "),e("li",[e("strong",[s._v("apache使用传统的 select模型")])])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("指标")]),s._v(" "),e("th",[s._v("select")]),s._v(" "),e("th",[s._v("epoll")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("性能")]),s._v(" "),e("td",[s._v("随着连接数的增加性能急剧下降。处理成千上万并发连接数，性能很差。")]),s._v(" "),e("td",[s._v("随着连接数的增加，性能基本没有下降。处理成千上万并发连接数，性能很好。")])]),s._v(" "),e("tr",[e("td",[s._v("连接数")]),s._v(" "),e("td",[s._v("连接数有限制，处理的最大连接数不超过1024，如果超过1024，则需要修改FD_SETSIZE宏，并重新编译。")]),s._v(" "),e("td",[s._v("连接数无限制")])]),s._v(" "),e("tr",[e("td",[s._v("内在处理机制")]),s._v(" "),e("td",[s._v("线性轮训")]),s._v(" "),e("td",[s._v("回调callback")])]),s._v(" "),e("tr",[e("td",[s._v("开发复杂度")]),s._v(" "),e("td",[s._v("低")]),s._v(" "),e("td",[s._v("中")])])])]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/nginx/epoll&select.png",alt:"epoll&select"}})])])}),[],!1,null,null,null);n.default=a.exports}}]);