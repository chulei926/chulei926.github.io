(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{532:function(s,a,t){"use strict";t.r(a);var e=t(22),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),t("ul",[t("li",[s._v("运算符可以对一个值或多个值进行运算或各种操作")]),s._v(" "),t("li",[s._v("比如 + 、-、= 都属于运算符")]),s._v(" "),t("li",[s._v("运算符的分类：\n"),t("ol",[t("li",[s._v("算术运算符")]),s._v(" "),t("li",[s._v("赋值运算符")]),s._v(" "),t("li",[s._v("比较运算符（关系运算符）")]),s._v(" "),t("li",[s._v("逻辑运算符")]),s._v(" "),t("li",[s._v("条件运算符（三元运算符）")])])])]),s._v(" "),t("h2",{attrs:{id:"算术运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[s._v("#")]),s._v(" 算术运算符")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("+")]),s._v("  加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）")]),s._v(" "),t("li",[t("code",[s._v("-")]),s._v("  减法运算符")]),s._v(" "),t("li",[t("code",[s._v("*")]),s._v("  乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）")]),s._v(" "),t("li",[t("code",[s._v("/")]),s._v("  除法运算符，运算时结果总会返回一个浮点类型")]),s._v(" "),t("li",[t("code",[s._v("//")]),s._v(" 整除，只会保留计算后的整数位，总会返回一个整型")]),s._v(" "),t("li",[t("code",[s._v("**")]),s._v(" 幂运算，求一个值的几次幂")]),s._v(" "),t("li",[t("code",[s._v("%")]),s._v("  取模，求两个数相除的余数")])]),s._v(" "),t("h2",{attrs:{id:"赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[s._v("#")]),s._v(" 赋值运算符")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("=")]),s._v("       可以将等号右侧的值赋值给等号左侧的变量")]),s._v(" "),t("li",[t("code",[s._v("+=")]),s._v("      a += 5      相当于 a = a + 5")]),s._v(" "),t("li",[t("code",[s._v("-=")]),s._v("      a -= 5      相当于 a = a - 5")]),s._v(" "),t("li",[t("code",[s._v("*=")]),s._v("      a *= 5      相当于 a = a * 5")]),s._v(" "),t("li",[t("code",[s._v("**=")]),s._v("     a **= 5     相当于 a = a ** 5")]),s._v(" "),t("li",[t("code",[s._v("/=")]),s._v("      a /= 5      相当于 a = a / 5")]),s._v(" "),t("li",[t("code",[s._v("//=")]),s._v("     a //= 5     相当于 a = a // 5")]),s._v(" "),t("li",[t("code",[s._v("%=")]),s._v("      a %= 5      相当于 a = a % 5")])]),s._v(" "),t("h2",{attrs:{id:"关系运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[s._v("#")]),s._v(" 关系运算符")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("关系运算符用来比较两个值之间的关系，总会返回一个布尔值。如果关系成立，返回True，否则返回False。\n")])])]),t("ul",[t("li",[t("p",[t("code",[s._v(">")]),s._v(" 比较左侧值是否大于右侧值")])]),s._v(" "),t("li",[t("p",[t("code",[s._v(">=")]),s._v(" 比较左侧的值是否大于或等于右侧的值")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("<")]),s._v(" 比较左侧值是否小于右侧值")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("<=")]),s._v(" 比较左侧的值是否小于或等于右侧的值")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("==")]),s._v(" 比较两个对象的值是否相等")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("!=")]),s._v(" 比较两个对象的值是否不相等，相等和不等比较的是对象的值，而不是id")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("is")]),s._v(" 比较两个对象是否是同一个对象，比较的是对象的id")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("is not")]),s._v(" 比较两个对象是否不是同一个对象，比较的是对象的id")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   比较两个字符串的Unicode编码时，是逐位比较的")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   0061 > 0062")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[s._v("#")]),s._v(" 逻辑运算符")]),s._v(" "),t("p",[s._v("逻辑运算符主要用来做一些逻辑判断")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("not")]),s._v(" 逻辑非"),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# not可以对符号右侧的值进行非运算")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于布尔值，非运算会对其进行取反操作，True变False，False变T")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于非布尔值，非运算会先将其转换为布尔值，然后再取反")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对a进行非运算")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])]),s._v(" "),t("li",[t("code",[s._v("and")]),s._v(" 逻辑与"),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and可以对符号两侧的值进行与运算")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与运算是找False的")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("li",[t("code",[s._v("or")]),s._v(" 逻辑或"),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or 可以对符号两侧的值进行或运算")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或运算两个值中只要有一个True，就会返回True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或运算是找True的")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nresult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"条件运算符-三元运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符-三元运算符"}},[s._v("#")]),s._v(" 条件运算符（三元运算符）")]),s._v(" "),t("ul",[t("li",[s._v("语法： "),t("code",[s._v("语句1 if 条件表达式 else 语句2")])]),s._v(" "),t("li",[s._v("执行流程：\n"),t("ul",[t("li",[s._v("条件运算符在执行时，会先对条件表达式进行求值判断")]),s._v(" "),t("li",[s._v("如果判断结果为True，则执行语句1，并返回执行结果")]),s._v(" "),t("li",[s._v("如果判断结果为False，则执行语句2，并返回执行结果")])])])]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a的值比较大！'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b的值比较大！'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("max")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" b  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取a和b之间的较大值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);