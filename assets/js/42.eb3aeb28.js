(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{406:function(_,v,l){"use strict";l.r(v);var a=l(22),i=Object(a.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"类加载子系统"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统"}},[_._v("#")]),_._v(" 类加载子系统")]),_._v(" "),l("p",[l("img",{attrs:{src:"/images/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F.png",alt:"类加载子系统"}})]),_._v(" "),l("p",[_._v("类加载子系统作用：")]),_._v(" "),l("ul",[l("li",[_._v("类加载子系统负责从文件系统或者网络中加载 class 文件，class 文件在文件开头有特定的文件标识。")]),_._v(" "),l("li",[_._v("ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由执行引擎（Execution Engine）决定。")]),_._v(" "),l("li",[_._v("加载的类信息存放于一块成为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包含字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）")])]),_._v(" "),l("h3",{attrs:{id:"类的加载过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类的加载过程"}},[_._v("#")]),_._v(" 类的加载过程")]),_._v(" "),l("p",[l("img",{attrs:{src:"/images/jvm/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png",alt:"类的加载过程"}})]),_._v(" "),l("h4",{attrs:{id:"_1-加载"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载"}},[_._v("#")]),_._v(" 1. 加载")]),_._v(" "),l("ol",[l("li",[_._v("通过一个类的全限定名获取定义此类的二进制字节流")]),_._v(" "),l("li",[_._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),_._v(" "),l("li",[l("strong",[_._v("在内存中生成一个代表这个类的 java.lang.Class 对象")]),_._v("，作为方法区这个类的各种数据的访问入口")])]),_._v(" "),l("h5",{attrs:{id:"加载-class文件的方式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#加载-class文件的方式"}},[_._v("#")]),_._v(" 加载.class文件的方式")]),_._v(" "),l("ol",[l("li",[_._v("从本地系统中直接加载")]),_._v(" "),l("li",[_._v("通过网络获取，典型场景：Web Applet")]),_._v(" "),l("li",[_._v("从zip压缩包中读取，成为jar、war格式的基础")]),_._v(" "),l("li",[_._v("运行时计算生成，使用最多的是：动态代理技术")]),_._v(" "),l("li",[_._v("有其他文件生成，典型场景：JSP应用")]),_._v(" "),l("li",[_._v("从专有数据库中提取.class文件，比较少见")]),_._v(" "),l("li",[_._v("从加密文件中获取，典型的防Class文件被反编译的保护措施")])]),_._v(" "),l("h4",{attrs:{id:"_2-链接"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-链接"}},[_._v("#")]),_._v(" 2. 链接")]),_._v(" "),l("ol",[l("li",[_._v("验证（Verify）\n"),l("ul",[l("li",[_._v("目的在于保护 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。")]),_._v(" "),l("li",[_._v("主要包含四种验证：\n"),l("ul",[l("li",[_._v("文件格式验证")]),_._v(" "),l("li",[_._v("元数据验证")]),_._v(" "),l("li",[_._v("字节码验证")]),_._v(" "),l("li",[_._v("符号引用验证")])])])])]),_._v(" "),l("li",[_._v("准备（Prepare）\n"),l("ul",[l("li",[_._v("为类变量分配内存并且设置该类变量的默认初始值，即零值。")]),_._v(" "),l("li",[_._v("这里不包含 final 修饰的 static ，因为 final 在编译的时候就会分配了，准备阶段会显示初始化。")]),_._v(" "),l("li",[_._v("这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到Java堆中。")])])]),_._v(" "),l("li",[_._v("解析（Resolve）\n"),l("ul",[l("li",[_._v("将常量池内的符号引用转换为直接引用的过程。")]),_._v(" "),l("li",[_._v("事实上，解析操作往往会伴随着 JVM 在执行皖初始化之后再执行。")]),_._v(" "),l("li",[_._v("符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。")]),_._v(" "),l("li",[_._v("解析动作主要是针对类或者接口、字段、类方法、接口方法、方法类型等。对用常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。")])])])]),_._v(" "),l("h4",{attrs:{id:"_3-初始化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化"}},[_._v("#")]),_._v(" 3. 初始化")]),_._v(" "),l("ol",[l("li",[l("strong",[_._v("初始化阶段就是执行类构造器方法"),l("code",[_._v("<clinit>()")]),_._v("的过程。")])]),_._v(" "),l("li",[_._v("此方法不需定义，是Javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。")]),_._v(" "),l("li",[_._v("构造器方法中指令按照语句在源文件中出现的顺序执行。")]),_._v(" "),l("li",[l("strong",[l("code",[_._v("<clinit>()")]),_._v("不同于类的构造器。")]),_._v("（关联：构造器是虚拟机视角下的"),l("code",[_._v("<init>()")]),_._v("）")]),_._v(" "),l("li",[_._v("若该类具有父类，JVM会保证子类的"),l("code",[_._v("<clinit>()")]),_._v("执行前，父类"),l("code",[_._v("<clinit>()")]),_._v("已经执行完毕")]),_._v(" "),l("li",[_._v("虚拟机必须保证一个类的"),l("code",[_._v("<clinit>()")]),_._v("方法在多线程下被同步加锁")])])])}),[],!1,null,null,null);v.default=i.exports}}]);