(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{407:function(a,s,t){"use strict";t.r(s);var n=t(22),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),t("p",[a._v("Java虚拟机对 class 文件采用的是"),t("strong",[a._v("按需加载")]),a._v("的方式，也就是说当需要使用该类是才会将它的 class 文件加载到内存生成 class 对象。")]),a._v(" "),t("p",[a._v("而且加载某个类的 class 文件时，Java虚拟机采用的是"),t("strong",[a._v("双亲委派机制")]),a._v("，即把请求交由父类处理，他是一种任务委派模式。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/jvm/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6.png",alt:"双亲委派机制"}})]),a._v(" "),t("h3",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),t("ol",[t("li",[a._v("如果一个类加载器收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。")]),a._v(" "),t("li",[a._v("如果父类的加载器还存在其父类加载器，则进一步向上委托，一次递归，请求最终将达到顶层的启动类加载器。")]),a._v(" "),t("li",[a._v("如果父类加载器可以完成类加载任务，就成功返回。倘若父类加载器无法完成加载任务，子类才会尝试自己去加载。")])]),a._v(" "),t("p",[a._v("以上就是双亲委派机制。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/jvm/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B62.png",alt:"双亲委派机制2"}})]),a._v(" "),t("h3",{attrs:{id:"优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),t("ol",[t("li",[a._v("避免类的重复加载")]),a._v(" "),t("li",[a._v("保护程序的安全，防止核心API被随意篡改\n"),t("ul",[t("li",[a._v("自定义类：java.lang.String")]),a._v(" "),t("li",[a._v("自定义类：java.lang.Leichu")])])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//    public static void main(String[] args)")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 否则 JavaFX 应用程序类必须扩展javafx.application.Application")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"我是自定义的String类"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hello")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// java.lang.SecurityException: Prohibited package name: java.lang")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("h1",{attrs:{id:"沙箱安全机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#沙箱安全机制"}},[a._v("#")]),a._v(" 沙箱安全机制")]),a._v(" "),t("p",[a._v("自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器进行加载，而引导类加载器在加载过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对Java核心源代码的保护，这就是"),t("strong",[a._v("沙箱安全机制")]),a._v("。")]),a._v(" "),t("hr"),a._v(" "),t("hr"),a._v(" "),t("hr"),a._v(" "),t("h1",{attrs:{id:"java-中的双亲委派的-双亲-怎么理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的双亲委派的-双亲-怎么理解"}},[a._v("#")]),a._v(" Java 中的双亲委派的“双亲”怎么理解 ？")]),a._v(" "),t("p",[a._v('双亲委派的原文是"parents delegate"。parents在英文中是“父母”、“双亲”的意思，但其实表达的是“父母这一辈”的人的意思。')]),a._v(" "),t("p",[a._v("实际上这个模型中，只是表达“父母这一辈”的class loader而已，并不是说真的有一个父亲的class loader和一个母亲class loader。")]),a._v(" "),t("p",[a._v("下面引用了Java API doc的原文：")]),a._v(" "),t("p",[t("strong",[a._v("The Java Class Loading Mechanism")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('The Java platform uses a delegation model for loading classes. \nThe basic idea is that every class loader has a "parent" class loader. \nWhen loading a class, a class loader first "delegates" the search for the class to its parent class loader before attempting to find the class itself.\n')])])]),t("p",[a._v("为什么是双亲委派模式 而不叫单亲委派模式呢？ 这就是名称问题而已，不管是继承自一个类还是实现多个接口，本质都要用到invoke指令。双亲单亲仅仅是个名称而已。")]),a._v(" "),t("p",[a._v("要知道什么是双亲委派模型，要先知道什么是类加载器。")]),a._v(" "),t("p",[a._v("类加载器就是根据指定全限定名称将class文件加载到JVM内存，转为Class对象。")]),a._v(" "),t("p",[a._v("如果站在JVM的角度来看，只存在两种类加载器:")]),a._v(" "),t("ol",[t("li",[a._v("启动类加载器（Bootstrap ClassLoader）：由C++语言实现（针对HotSpot）,负责将存放在<JAVA_HOME>\\lib目录或-Xbootclasspath参数指定的路径中的类库加载到内存中。")]),a._v(" "),t("li",[a._v("其他类加载器：由Java语言实现，继承自抽象类ClassLoader。如：\n"),t("ul",[t("li",[a._v("扩展类加载器（Extension ClassLoader）：负责加载<JAVA_HOME>\\lib\\ext目录或java.ext.dirs系统变量指定的路径中的所有类库。")]),a._v(" "),t("li",[a._v("应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。")])])])]),a._v(" "),t("p",[t("strong",[a._v("双亲委派模型工作过程是：")])]),a._v(" "),t("p",[a._v("如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。")])])}),[],!1,null,null,null);s.default=e.exports}}]);