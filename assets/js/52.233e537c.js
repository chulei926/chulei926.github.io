(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{413:function(t,a,e){"use strict";e.r(a);var r=e(22),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"spring基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring基础"}},[t._v("#")]),t._v(" spring基础")]),t._v(" "),e("h2",{attrs:{id:"spring架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring架构"}},[t._v("#")]),t._v(" spring架构")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/spring/spring.jpg",alt:"spring架构图"}})]),t._v(" "),e("h2",{attrs:{id:"核心容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心容器"}},[t._v("#")]),t._v(" 核心容器：")]),t._v(" "),e("blockquote",[e("p",[t._v("包括Core、Beans、Context、EL模块。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Core")]),t._v(" : 封装了框架依赖的最底层部分，包括资源访问、类型转换及一些常用工具类。")]),t._v(" "),e("li",[e("strong",[t._v("Beans")]),t._v(" : 提供了框架的基础部分，包括反转控制和依赖注入。其中Bean Factory是容器核心，本质是“工厂设计模式”的实现，而且无需编程实现“单例设计模式”，单例完全由容器控制，而且提倡面向接口编程，而非面向实现编程；所有应用程序对象及对象间关系由框架管理，从而真正把你从程序逻辑中把维护对象之间的依赖关系提取出来，所有这些依赖关系都由BeanFactory来维护。")]),t._v(" "),e("li",[e("strong",[t._v("Context")]),t._v(" : 以Core和Beans为基础，集成Beans模块功能并添加资源绑定、数据验证、国际化、Java EE支持、容器生命周期、事件传播等；核心接口是ApplicationContext。")]),t._v(" "),e("li",[e("strong",[t._v("EL")]),t._v(" : 提供强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。")])]),t._v(" "),e("h2",{attrs:{id:"aop、aspects模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop、aspects模块"}},[t._v("#")]),t._v(" AOP、Aspects模块")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("AOP")]),t._v(" : Spring AOP模块提供了符合 AOP Alliance规范的面向方面的编程（aspect-oriented programming）实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中；这样各专其职，降低业务逻辑和通用功能的耦合。")]),t._v(" "),e("li",[e("strong",[t._v("Aspects")]),t._v(" : 提供了对AspectJ的集成，AspectJ提供了比Spring ASP更强大的功能。")])]),t._v(" "),e("h2",{attrs:{id:"数据访问-集成模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据访问-集成模块"}},[t._v("#")]),t._v(" 数据访问/集成模块")]),t._v(" "),e("blockquote",[e("p",[t._v("该模块包括了JDBC、ORM、OXM、JMS和事务管理。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("事务")]),t._v(" : 该模块用于Spring管理事务，只要是Spring管理对象都能得到Spring管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事务管理。")]),t._v(" "),e("li",[e("strong",[t._v("JDBC")]),t._v(" ： 提供了一个JBDC的样例模板，使用这些模板能消除传统冗长的JDBC编码还有必须的事务控制，而且能享受到Spring管理事务的好处。")]),t._v(" "),e("li",[e("strong",[t._v("ORM")]),t._v(" ： 提供与流行的“对象-关系”映射框架的无缝集成，包括Hibernate、JPA、Ibatiss等。而且可以使用Spring事务管理，无需额外控制事务。")]),t._v(" "),e("li",[e("strong",[t._v("OXM")]),t._v(" ： 提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。")]),t._v(" "),e("li",[e("strong",[t._v("JMS")]),t._v(" ： 用于JMS(Java Messaging Service)，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。")]),t._v(" "),e("li",[e("strong",[t._v("Web")]),t._v(" ： 提供了基础的web功能。例如多文件上传、集成IoC容器、远程过程访问（RMI、Hessian、Burlap）以及Web Service支持，并提供一个RestTemplate类来提供方便的Restful services访问。")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"给-spring-中-注册组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给-spring-中-注册组件"}},[t._v("#")]),t._v(" 给 spring 中 注册组件：")]),t._v(" "),e("ol",[e("li",[t._v("包扫描 + 组件标注注解（@Controller @Service @Respository @Component）")]),t._v(" "),e("li",[t._v("@Bean")]),t._v(" "),e("li",[t._v("@Import\n"),e("ol",[e("li",[t._v("@Import(要导入到容器中的组件)：容器中就会自动注册这个组件，id 默认是全类名。")]),t._v(" "),e("li",[t._v("ImportSelector: 返回值就是要导入到容器中的组件的全类名")]),t._v(" "),e("li",[t._v("ImportBeanDefinitionRegistrar：手动注册")])])]),t._v(" "),e("li",[t._v("FactoryBean（工厂bean）\n"),e("ol",[e("li",[t._v("通过 applicationContext.getBean()获取到是工厂bean创建的对象，而不是 工厂 bean 本身.")]),t._v(" "),e("li",[t._v('如果要获取 工厂bean 本身，需要在id之前加上 & 符号，比如 applicationContext.getBean("&userFactoryBean")')])])])]),t._v(" "),e("h2",{attrs:{id:"bean的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期"}},[t._v("#")]),t._v(" bean的生命周期：")]),t._v(" "),e("blockquote",[e("p",[t._v("bean 创建 ---\x3e 初始化 ---\x3e 销毁")])])])}),[],!1,null,null,null);a.default=s.exports}}]);