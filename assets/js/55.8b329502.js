(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{416:function(e,s,r){"use strict";r.r(s);var a=r(22),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"resource-与-resourceloader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resource-与-resourceloader"}},[e._v("#")]),e._v(" Resource 与 ResourceLoader")]),e._v(" "),r("h2",{attrs:{id:"_1-org-springframework-core-io-resource"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-org-springframework-core-io-resource"}},[e._v("#")]),e._v(" 1. "),r("code",[e._v("org.springframework.core.io.Resource")])]),e._v(" "),r("p",[e._v("对资源的抽象。它的每一个实现类都代表了一种资源的访问策略，\n如 ClassPathResource、RLResource、FileSystemResource 等。"),r("br"),e._v("\norg.springframework.core.io.Resource 为 Spring 框架所有资源的抽象和访问接口，"),r("br"),e._v("\n它继承 org.springframework.core.io.InputStreamSource接口。"),r("br"),e._v("\n作为所有资源的统一抽象，Resource 定义了一些通用的方法，\n由子类 AbstractResource 提供统一的默认实现。")]),e._v(" "),r("ul",[r("li",[e._v("方法结构图如下："),r("br")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/images/spring/Resource_Structure.png",alt:"Resource_Structure"}})]),e._v(" "),r("ul",[r("li",[e._v("类结构关系图如下："),r("br"),e._v(" "),r("img",{attrs:{src:"/images/spring/Resource.png",alt:"Resource"}}),r("br"),e._v("\n从上图可以看到，Resource 根据资源的不同类型提供不同的具体实现，如下：\n"),r("ul",[r("li",[r("code",[e._v("FileSystemResource")]),e._v(" ：对 java.io.File 类型资源的封装，只要是跟 File 打交道的，基本上与 FileSystemResource 也可以打交道。支持文件和 URL 的形式，实现 WritableResource 接口，且从 Spring Framework 5.0 开始，FileSystemResource 使用 NIO2 API进行读/写交互。")]),e._v(" "),r("li",[r("code",[e._v("ByteArrayResource")]),e._v(" ：对字节数组提供的数据的封装。如果通过 InputStream 形式访问该类型的资源，该实现会根据字节数组的数据构造一个相应的 ByteArrayInputStream。")]),e._v(" "),r("li",[r("code",[e._v("UrlResource")]),e._v(" ：对 java.net.URL类型资源的封装。内部委派 URL 进行具体的资源操作。")]),e._v(" "),r("li",[r("code",[e._v("ClassPathResource")]),e._v(" ：class path 类型资源的实现。使用给定的 ClassLoader 或者给定的 Class 来加载资源。")]),e._v(" "),r("li",[r("code",[e._v("InputStreamResource")]),e._v(" ：将给定的 InputStream 作为一种资源的 Resource 的实现类。")])])]),e._v(" "),r("li",[r("code",[e._v("org.springframework.core.io.AbstractResource")]),e._v(" ，为 Resource 接口的默认抽象实现。它实现了 Resource 接口的大部分的公共实现，作为 Resource 接口中的重中之重")])]),e._v(" "),r("h2",{attrs:{id:"_2-org-springframework-core-io-resourceloader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-org-springframework-core-io-resourceloader"}},[e._v("#")]),e._v(" 2. "),r("code",[e._v("org.springframework.core.io.ResourceLoader")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/images/spring/ResourceLoader.png",alt:"ResourceLoader"}})]),e._v(" "),r("p",[r("code",[e._v("org.springframework.core.io.ResourceLoader")]),e._v(" 为 Spring 资源加载的统一抽象，"),r("strong",[e._v("具体的资源加载则由相应的实现类来完成")]),e._v("，所以可以将 ResourceLoader 称作为统一资源定位器。")]),e._v(" "),r("blockquote",[r("p",[e._v("ResourceLoader，定义资源加载器，主要应用于根据给定的资源文件地址，返回对应的 Resource 。")])]),e._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ResourceLoader")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/** Pseudo URL prefix for loading from the class path: "classpath:". */')]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" CLASSPATH_URL_PREFIX "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ResourceUtils")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("CLASSPATH_URL_PREFIX"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Resource")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("getResource")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" location"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ClassLoader")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("getClassLoader")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);